// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  accounts Account[]
  sessions Session[]

  @@map(name: "user")
}

model Routine {
  id            String    @id @default(cuid())
  semester      Int
  subject_code  String
  subject_name  String
  faculty       String
  group         Group
  day           String
  start         Int
  end           Int
  room          String
  type          SubjectType

  @@map(name: "routine")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   Json?
  published Boolean  @default(false)
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  authorId  String

  author Club @relation(fields: [authorId], references: [id])

  @@map(name: "posts")
}

model Club {
  id              String    @id @default(cuid())
  title           String    @unique
  coordinator     Json 
  cocoordinator   Json?
  website         String

  Post     Post[]  

  @@map(name: "club")
}

model Student {
  id            String      @id @default(cuid())
  name          String?
  email         String      @unique
  image         String?
  year          Int
  programme     Programme
  semester      Int
  branch        Branch
  group         Group
  roll          Int

  @@map(name: "students")
}

enum Programme {
  B
  M
  P
}

enum Branch {
  CS
  EC
  ME
  SM
  DS
}

enum SubjectType {
  THEORY
  TUTORIAL
  LAB
}

enum Group {
  A
  B
}
